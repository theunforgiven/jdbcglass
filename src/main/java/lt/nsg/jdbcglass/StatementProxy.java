package lt.nsg.jdbcglass;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.sql.*;
import java.util.ArrayList;

public class StatementProxy extends AbstractStatementProxy {
    private final static Logger log = LoggerFactory.getLogger(StatementProxy.class);
    private final ArrayList<String> batches = new ArrayList<>();
    private final Connection connection;
    private ResultSet currentResultSet;

    public StatementProxy(Statement statement, Connection connection) {
        super(statement);
        this.connection = connection;
    }

    @Override
    public ResultSet executeQuery(String sql) throws SQLException {
        logSql(sql);
        ResultSet resultSet = getStatement().executeQuery(sql);
        ResultSet wrapper = new ResultSetProxy(resultSet, this);
        this.currentResultSet = wrapper;
        return wrapper;
    }

    @Override
    public int executeUpdate(String sql) throws SQLException {
        logSql(sql);
        return getStatement().executeUpdate(sql);
    }


    @Override
    public boolean execute(String sql) throws SQLException {
        logSql(sql);
        return getStatement().execute(sql);
    }

    @Override
    public ResultSet getResultSet() throws SQLException {
        return this.currentResultSet;
    }

    @Override
    public void addBatch(String sql) throws SQLException {
        batches.add(sql);
        getStatement().addBatch(sql);
    }

    @Override
    public void clearBatch() throws SQLException {
        clearBatches();
        getStatement().clearBatch();
    }

    @Override
    public int[] executeBatch() throws SQLException {
        logBatch();
        clearBatches();
        return getStatement().executeBatch();
    }

    @Override
    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        logSql(sql);
        return getStatement().executeUpdate(sql, autoGeneratedKeys);
    }

    @Override
    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        logSql(sql);
        return getStatement().executeUpdate(sql, columnIndexes);
    }

    @Override
    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        logSql(sql);
        return getStatement().executeUpdate(sql, columnNames);
    }

    @Override
    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        logSql(sql);
        return getStatement().execute(sql, autoGeneratedKeys);
    }

    @Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        logSql(sql);
        return getStatement().execute(sql, columnIndexes);
    }

    @Override
    public boolean execute(String sql, String[] columnNames) throws SQLException {
        logSql(sql);
        return getStatement().execute(sql, columnNames);
    }

    public Connection getConnection() throws SQLException {
        return this.connection;
    }

    private void clearBatches() {
        batches.clear();
    }

    private void logSql(String sql) {
        log.info(sql);
    }

    private void logBatch() {
        for (String batch : batches) {
            logSql(batch);
        }
    }
}

