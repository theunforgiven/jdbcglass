package lt.nsg.jdbcglass.connection;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.sql.*;

public class ConnectionProxy extends AbstractConnectionProxy {
    private final Logger log = LoggerFactory.getLogger(ConnectionProxy.class);
    private final ConnectionHelper connectionHelper;
    private final ProxyFactory proxyFactory;

    public ConnectionProxy(Connection connection) {
        super(connection);
        this.proxyFactory = new ProxyFactory(this);
        this.connectionHelper = new ConnectionHelper();
        this.connectionHelper.logConnectionOpened(log);
    }

    @Override
    public void close() throws SQLException {
        getConnection().close();
        connectionHelper.logConnectionClosed(log);
    }

    @Override
    public Statement createStatement() throws SQLException {
        return this.proxyFactory.proxyStatement(getConnection().createStatement());
    }

    @Override
    public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
        Statement statement = getConnection().createStatement(resultSetType, resultSetConcurrency);
        return this.proxyFactory.proxyStatement(statement);
    }

    @Override
    public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        Statement statement = getConnection().createStatement(resultSetType, resultSetConcurrency, resultSetHoldability);
        return this.proxyFactory.proxyStatement(statement);
    }

    @Override
    public void setAutoCommit(boolean autoCommit) throws SQLException {
        getConnection().setAutoCommit(autoCommit);
        connectionHelper.logAutoCommitChanged(log, autoCommit);
    }

    @Override
    public void rollback() throws SQLException {
        getConnection().rollback();
        connectionHelper.logTransactionRolledback(log);
    }

    @Override
    public void rollback(Savepoint savepoint) throws SQLException {
        getConnection().rollback(savepoint);
        connectionHelper.logTransactionRolledback(log);
    }

    @Override
    public void commit() throws SQLException {
        getConnection().commit();
        connectionHelper.logTransactionCommitted(log);
    }

    @Override
    public DatabaseMetaData getMetaData() throws SQLException {
        DatabaseMetaData metaData = getConnection().getMetaData();
        return this.proxyFactory.proxyDatabaseMetaData(metaData);
    }

    @Override
    public CallableStatement prepareCall(String sql) throws SQLException {
        CallableStatement statement = getConnection().prepareCall(sql);
        return this.proxyFactory.proxyCallableStatement(statement, sql);
    }

    @Override
    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        CallableStatement statement = getConnection().prepareCall(sql, resultSetType, resultSetConcurrency);
        return this.proxyFactory.proxyCallableStatement(statement, sql);
    }

    @Override
    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        CallableStatement statement = getConnection().prepareCall(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
        return this.proxyFactory.proxyCallableStatement(statement, sql);
    }

    @Override
    public PreparedStatement prepareStatement(String sql) throws SQLException {
        PreparedStatement statement = getConnection().prepareStatement(sql);
        return this.proxyFactory.proxyPreparedStatement(statement, sql);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        PreparedStatement statement = getConnection().prepareStatement(sql, resultSetType, resultSetConcurrency);
        return this.proxyFactory.proxyPreparedStatement(statement, sql);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        PreparedStatement statement = getConnection().prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
        return this.proxyFactory.proxyPreparedStatement(statement, sql);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
        PreparedStatement statement = getConnection().prepareStatement(sql, autoGeneratedKeys);
        return this.proxyFactory.proxyPreparedStatement(statement, sql);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
        PreparedStatement statement = getConnection().prepareStatement(sql, columnIndexes);
        return this.proxyFactory.proxyPreparedStatement(statement, sql);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
        PreparedStatement statement = getConnection().prepareStatement(sql, columnNames);
        return this.proxyFactory.proxyPreparedStatement(statement, sql);
    }
}