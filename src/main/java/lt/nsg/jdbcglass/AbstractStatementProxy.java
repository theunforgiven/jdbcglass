package lt.nsg.jdbcglass;

import java.sql.*;

public abstract class AbstractStatementProxy implements Statement {
    private final Statement statement;

    protected final Statement getStatement() {
        return statement;
    }

    protected AbstractStatementProxy(Statement statement) {
        this.statement = statement;
    }

    public <T> T unwrap(Class<T> iface) throws SQLException {
        return statement.unwrap(iface);
    }

    public boolean isWrapperFor(Class<?> iface) throws SQLException {
        return statement.isWrapperFor(iface);
    }

    public void close() throws SQLException {
        getStatement().close();
    }

    public int getMaxFieldSize() throws SQLException {
        return getStatement().getMaxFieldSize();
    }

    public void setMaxFieldSize(int max) throws SQLException {
        getStatement().setMaxFieldSize(max);
    }

    public int getMaxRows() throws SQLException {
        return getStatement().getMaxRows();
    }

    public void setMaxRows(int max) throws SQLException {
        getStatement().setMaxRows(max);
    }

    public void setEscapeProcessing(boolean enable) throws SQLException {
        getStatement().setEscapeProcessing(enable);
    }

    public int getQueryTimeout() throws SQLException {
        return getStatement().getQueryTimeout();
    }

    public void setQueryTimeout(int seconds) throws SQLException {
        getStatement().setQueryTimeout(seconds);
    }

    public void cancel() throws SQLException {
        getStatement().cancel();
    }

    public SQLWarning getWarnings() throws SQLException {
        return getStatement().getWarnings();
    }

    public void clearWarnings() throws SQLException {
        getStatement().clearWarnings();
    }

    public void setCursorName(String name) throws SQLException {
        getStatement().setCursorName(name);
    }


    public int getResultSetHoldability() throws SQLException {
        return getStatement().getResultSetHoldability();
    }

    public boolean isClosed() throws SQLException {
        return getStatement().isClosed();
    }

    public void setPoolable(boolean poolable) throws SQLException {
        getStatement().setPoolable(poolable);
    }

    public boolean isPoolable() throws SQLException {
        return getStatement().isPoolable();
    }

    public void closeOnCompletion() throws SQLException {
        getStatement().closeOnCompletion();
    }

    public boolean isCloseOnCompletion() throws SQLException {
        return getStatement().isCloseOnCompletion();
    }

    public abstract Connection getConnection() throws SQLException;

    public boolean getMoreResults(int current) throws SQLException {
        return getStatement().getMoreResults(current);
    }

    public ResultSet getGeneratedKeys() throws SQLException {
        return getStatement().getGeneratedKeys();
    }

    public int getUpdateCount() throws SQLException {
        return getStatement().getUpdateCount();
    }

    public boolean getMoreResults() throws SQLException {
        return getStatement().getMoreResults();
    }

    public void setFetchDirection(int direction) throws SQLException {
        getStatement().setFetchDirection(direction);
    }

    public int getFetchDirection() throws SQLException {
        return getStatement().getFetchDirection();
    }

    public void setFetchSize(int rows) throws SQLException {
        getStatement().setFetchSize(rows);
    }

    public int getFetchSize() throws SQLException {
        return getStatement().getFetchSize();
    }

    public int getResultSetConcurrency() throws SQLException {
        return getStatement().getResultSetConcurrency();
    }

    public int getResultSetType() throws SQLException {
        return getStatement().getResultSetType();
    }

    public abstract ResultSet executeQuery(String sql) throws SQLException;

    public abstract int executeUpdate(String sql) throws SQLException;

    public abstract boolean execute(String sql) throws SQLException;

    public abstract ResultSet getResultSet() throws SQLException;

    public abstract void addBatch(String sql) throws SQLException;

    public abstract void clearBatch() throws SQLException;

    public abstract int[] executeBatch() throws SQLException;

    public abstract int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException;

    public abstract int executeUpdate(String sql, int[] columnIndexes) throws SQLException;

    public abstract int executeUpdate(String sql, String[] columnNames) throws SQLException;

    public abstract boolean execute(String sql, int autoGeneratedKeys) throws SQLException;

    public abstract boolean execute(String sql, int[] columnIndexes) throws SQLException;

    public abstract boolean execute(String sql, String[] columnNames) throws SQLException;
}
