package lt.nsg.jdbcglass.statement;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

public class StatementProxy extends AbstractStatementProxy {
    private final static Logger log = LoggerFactory.getLogger(StatementProxy.class);
    private final Connection connection;
    private final StatementHelper statementHelper;
    private final ResultSetProxyHelper resultSetProxyHelper;

    public StatementProxy(Statement statement, Connection connection) {
        super(statement);
        this.connection = connection;
        this.statementHelper = new StatementHelper();
        this.resultSetProxyHelper = new ResultSetProxyHelper(this);
    }

    @Override
    public int executeUpdate(String sql) throws SQLException {
        statementHelper.logSql(sql, log);
        return getStatement().executeUpdate(sql);
    }


    @Override
    public boolean execute(String sql) throws SQLException {
        statementHelper.logSql(sql, log);
        return getStatement().execute(sql);
    }

    @Override
    public void addBatch(String sql) throws SQLException {
        statementHelper.addBatch(sql);
        getStatement().addBatch(sql);
    }

    @Override
    public void clearBatch() throws SQLException {
        statementHelper.clearBatches();
        getStatement().clearBatch();
    }

    @Override
    public int[] executeBatch() throws SQLException {
        statementHelper.logBatch(log);
        statementHelper.clearBatches();
        return getStatement().executeBatch();
    }

    @Override
    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        statementHelper.logSql(sql, log);
        return getStatement().executeUpdate(sql, autoGeneratedKeys);
    }

    @Override
    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        statementHelper.logSql(sql, log);
        return getStatement().executeUpdate(sql, columnIndexes);
    }

    @Override
    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        statementHelper.logSql(sql, log);
        return getStatement().executeUpdate(sql, columnNames);
    }

    @Override
    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        statementHelper.logSql(sql, log);
        return getStatement().execute(sql, autoGeneratedKeys);
    }

    @Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        statementHelper.logSql(sql, log);
        return getStatement().execute(sql, columnIndexes);
    }

    @Override
    public boolean execute(String sql, String[] columnNames) throws SQLException {
        statementHelper.logSql(sql, log);
        return getStatement().execute(sql, columnNames);
    }

    @Override
    public ResultSet getGeneratedKeys() throws SQLException {
        ResultSet resultSet = getStatement().getGeneratedKeys();
        return this.resultSetProxyHelper.proxyResultSet(resultSet);
    }

    @Override
    public final Connection getConnection() throws SQLException {
        return this.connection;
    }

    @Override
    public final ResultSet executeQuery(String sql) throws SQLException {
        statementHelper.logSql(sql, log);
        final ResultSet resultSet = getStatement().executeQuery(sql);
        return this.resultSetProxyHelper.updateCachedResultSet(resultSet);
    }

    @Override
    public final ResultSet getResultSet() throws SQLException {
        ResultSet resultSet = this.getStatement().getResultSet();
        return this.resultSetProxyHelper.updateCachedResultSet(resultSet);
    }

    protected ResultSetProxyHelper getResultSetProxyHelper() {
        return this.resultSetProxyHelper;
    }

    protected StatementHelper getStatementHelper() {
        return this.statementHelper;
    }
}