package lt.nsg.jdbcglass.statement;

import lt.nsg.jdbcglass.statement.log.BatchLogger;
import lt.nsg.jdbcglass.statement.log.StatementLogWriter;
import lt.nsg.jdbcglass.statement.proxy.StatementProxy;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

public class LoggingStatementProxy extends StatementProxy {
    private final static Logger log = LoggerFactory.getLogger(LoggingStatementProxy.class);
    private final StatementLogWriter statementLogWriter;
    private final BatchLogger batchLogger;

    public LoggingStatementProxy(Statement statement, Connection connection) {
        super(statement, connection);
        this.statementLogWriter = new StatementLogWriter();
        this.batchLogger = new BatchLogger();
    }

    protected BatchLogger getBatchLogger() {
        return batchLogger;
    }

    @Override
    public int executeUpdate(String sql) throws SQLException {
        int rows = super.executeUpdate(sql);
        statementLogWriter.writeLogStatement(sql, log);
        return rows;
    }

    @Override
    public boolean execute(String sql) throws SQLException {
        boolean result = super.execute(sql);
        statementLogWriter.writeLogStatement(sql, log);
        return result;
    }

    @Override
    public void addBatch(String sql) throws SQLException {
        super.addBatch(sql);
        batchLogger.logAddBatch(sql);
    }

    @Override
    public void clearBatch() throws SQLException {
        super.clearBatch();
        batchLogger.clearBatches();
    }

    @Override
    public int[] executeBatch() throws SQLException {
        int[] rows = super.executeBatch();
        batchLogger.writeLogBatch(statementLogWriter, log);
        return rows;
    }

    @Override
    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        int rows = super.executeUpdate(sql, autoGeneratedKeys);
        statementLogWriter.writeLogStatement(sql, log);
        return rows;
    }

    @Override
    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        int rows = super.executeUpdate(sql, columnIndexes);
        statementLogWriter.writeLogStatement(sql, log);
        return rows;
    }

    @Override
    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        int rows = super.executeUpdate(sql, columnNames);
        statementLogWriter.writeLogStatement(sql, log);
        return rows;
    }

    @Override
    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        boolean result = super.execute(sql, autoGeneratedKeys);
        statementLogWriter.writeLogStatement(sql, log);
        return result;
    }

    @Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        boolean result = super.execute(sql, columnIndexes);
        statementLogWriter.writeLogStatement(sql, log);
        return result;
    }

    @Override
    public boolean execute(String sql, String[] columnNames) throws SQLException {
        boolean result = super.execute(sql, columnNames);
        statementLogWriter.writeLogStatement(sql, log);
        return result;
    }


    @Override
    public ResultSet executeQuery(String sql) throws SQLException {
        ResultSet resultSet = super.executeQuery(sql);
        statementLogWriter.writeLogStatement(sql, log);
        return resultSet;
    }

    protected StatementLogWriter getStatementLogWriter() {
        return this.statementLogWriter;
    }
}